import random
from django.db import models
from django.contrib.auth.models import User

# Helper list for random jersey colors. Other data will be generated by Faker.
HOME_JERSEY_COLORS = ['White', 'Royal Blue', 'Yellow', 'Red']
AWAY_JERSEY_COLORS = ['Black', 'Dark Blue', 'Grey', 'Green']


class League(models.Model):
    """
    Represents a basketball league.
    """
    name = models.CharField(max_length=100, unique=True, verbose_name="League Name")
    level = models.PositiveIntegerField(default=1, verbose_name="League Level")

    def __str__(self):
        return f"{self.name} (Level {self.level})"

    class Meta:
        verbose_name = "League"
        verbose_name_plural = "Leagues"
        ordering = ['level', 'name']


class Team(models.Model):
    """
    Represents a basketball team.
    """
    name = models.CharField(max_length=100, unique=True, verbose_name="Team Name")
    league = models.ForeignKey(League, on_delete=models.CASCADE, related_name="teams", verbose_name="League")
    
    # A OneToOneField ensures a user can only manage one team.
    # It's set to SET_NULL, so if a User is deleted, the team becomes available.
    user = models.OneToOneField(User, on_delete=models.SET_NULL, null=True, blank=True, verbose_name="Manager (User)")
    
    coach_name = models.CharField(max_length=100, verbose_name="Coach Name")
    arena_name = models.CharField(max_length=100, verbose_name="Arena Name")
    home_jersey_color = models.CharField(max_length=50, verbose_name="Home Jersey Color")
    away_jersey_color = models.CharField(max_length=50, verbose_name="Away Jersey Color")
    titles = models.PositiveIntegerField(default=0, verbose_name="Championships")

    def __str__(self):
        return self.name

    @property
    def is_available(self):
        """
        Returns True if the team is available (not managed by a user).
        """
        return self.user is None

    class Meta:
        verbose_name = "Team"
        verbose_name_plural = "Teams"
        ordering = ['name']


class Player(models.Model):
    """
    Represents a basketball player.
    """
    # Using constants for positions is a best practice to avoid typos.
    POINT_GUARD = 'PG'
    SHOOTING_GUARD = 'SG'
    SMALL_FORWARD = 'SF'
    POWER_FORWARD = 'PF'
    CENTER = 'C'

    POSITION_CHOICES = [
        (POINT_GUARD, 'Point Guard'),
        (SHOOTING_GUARD, 'Shooting Guard'),
        (SMALL_FORWARD, 'Small Forward'),
        (POWER_FORWARD, 'Power Forward'),
        (CENTER, 'Center'),
    ]

    # Personal Details
    first_name = models.CharField(max_length=50, verbose_name="First Name")
    last_name = models.CharField(max_length=50, verbose_name="Last Name")
    age = models.IntegerField(verbose_name="Age")
    
    # Positional and Team Details
    position_primary = models.CharField(max_length=2, choices=POSITION_CHOICES, verbose_name="Primary Position")
    position_secondary = models.CharField(max_length=2, choices=POSITION_CHOICES, null=True, blank=True, verbose_name="Secondary Position")
    
    # A player can be a free agent (team is NULL). If a team is deleted, players become free agents.
    team = models.ForeignKey(Team, on_delete=models.SET_NULL, null=True, blank=True, related_name="players", verbose_name="Team")
    
    # Physical Attributes
    height = models.FloatField(verbose_name="Height (meters)")
    weight = models.FloatField(verbose_name="Weight (kg)")

    # Basic Skills (range 60-100)
    shooting_2p = models.IntegerField(default=60, verbose_name="2-Point Shooting")
    shooting_3p = models.IntegerField(default=60, verbose_name="3-Point Shooting")
    free_throws = models.IntegerField(default=60, verbose_name="Free Throws")
    rebound_def = models.IntegerField(default=60, verbose_name="Defensive Rebound")
    rebound_off = models.IntegerField(default=60, verbose_name="Offensive Rebound")
    passing = models.IntegerField(default=60, verbose_name="Passing")
    blocking = models.IntegerField(default=60, verbose_name="Blocking")
    defense = models.IntegerField(default=60, verbose_name="Defense")
    game_iq = models.IntegerField(default=60, verbose_name="Game IQ")
    
    # Athletic Skills
    speed = models.IntegerField(default=60, verbose_name="Speed")
    jumping = models.IntegerField(default=60, verbose_name="Jumping")
    strength = models.IntegerField(default=60, verbose_name="Strength")
    stamina = models.IntegerField(default=60, verbose_name="Stamina")
    
    # Current Status
    fitness = models.PositiveIntegerField(default=100, verbose_name="Fitness")

    @property
    def rating(self):
        """
        A calculated property that returns the player's average rating.
        This is not a database field; it's calculated on-the-fly.
        """
        skills = [
            self.shooting_2p, self.shooting_3p, self.free_throws,
            self.rebound_def, self.rebound_off, self.passing,
            self.blocking, self.defense, self.game_iq, self.speed,
            self.jumping, self.strength, self.stamina
        ]
        if not skills:
            return 0
        return round(sum(skills) / len(skills))

    @property
    def position_numeric(self):
        """
        A calculated property that returns the numeric value of the position.
        """
        mapping = {
            self.POINT_GUARD: 1,
            self.SHOOTING_GUARD: 2,
            self.SMALL_FORWARD: 3,
            self.POWER_FORWARD: 4,
            self.CENTER: 5,
        }
        return mapping.get(self.position_primary, 0) # Returns 0 if no position is set

    def __str__(self):
        return f"{self.first_name} {self.last_name} (Rating: {self.rating})"

    class Meta:
        verbose_name = "Player"
        verbose_name_plural = "Players"
        ordering = ['last_name', 'first_name']

        